# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - IntelliTect.TestTools.Data/*
      - IntelliTect.TestTools.Data.slnf
      - Samples/IntelliTect.TestTools.Data.Sample/*
      - TestTools/azure-pipelines-IntelliTect.TestTools.Data.yml

variables:
  version: '0.3.0'
  BuildConfiguration: Release

pool:
  vmImage: 'windows-2022'

steps:

- task: NuGetToolInstaller@1
  displayName: 'Use latest NuGet'

- task: NuGetCommand@2
  displayName: 'NuGet Restore'
  inputs:
    command: 'restore'
    restoreSolution: '**/IntelliTect.TestTools.sln'
    feedsToUse: 'select'

- task: VSBuild@1
  displayName: 'Build'
  inputs:
    solution: '**/IntelliTect.TestTools.Data.slnf'
    clean: true
    configuration: '$(BuildConfiguration)'
    msbuildArgs: '/p:Version=$(version)'

- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: 'test'
    projects: '$(System.DefaultWorkingDirectory)/IntelliTect.TestTools.Data.Test/IntelliTect.TestTools.Data.Test.csproj'

- task: PowerShell@2
  displayName: 'dotnet pack'
  inputs:
    targetType: 'inline'
    script: dotnet pack $(System.DefaultWorkingDirectory)/IntelliTect.TestTools.Data/ --no-build -c $(BuildConfiguration) -p:Version="$(version)-ci-$(Build.BuildId)" -o $(Build.ArtifactStagingDirectory)
    pwsh: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
